import { Typography } from '../../atoms';
import { Badge } from '../../atoms';
import { Currency } from '../../atoms/base/currency';
import { UserAccountCard } from '../../atoms';

export interface BlockDetailsBannerTextProps {
  reward: string;
  symbol?: string;
  generatorName?: string;
  generatorAddress: string;
  isFinal: boolean;
  numberOfTransactions: number;
}

export const BlockDetailsBannerText = ({
  reward,
  symbol,
  generatorName,
  generatorAddress,
  isFinal,
  numberOfTransactions,
}: BlockDetailsBannerTextProps) => {
  return (
    <div className="transitionBannerContainerWidthMobile desktop:w-auto  flex flex-wrap items-center gap-1.5 mt-5">
      <Typography color="onBackgroundMedium" variant="paragraph-md">
        {'generated by'}
      </Typography>

      {/* SENDER */}
      <UserAccountCard
        address={generatorAddress}
        addressColor="onBackground"
        addressVariant={'paragraph-md'}
        fontWeight="semibold"
        name={generatorName}
        nameColor="onBackground"
        nameOnly
        nameVariant={'paragraph-md'}
        size={24}
        width="auto"
      />

      <Typography color="onBackgroundMedium" variant="paragraph-md">
        {' containing'}
      </Typography>

      {/* TRANSACTIONS */}
      <Typography fontWeight="semibold" variant="paragraph-md">
        {numberOfTransactions}
      </Typography>

      <Typography color="onBackgroundMedium" variant="paragraph-md">
        {' transactions with a reward of'}
      </Typography>

      {/* AMOUNT */}
      <Currency amount={reward ?? 0} decimals={4} fontWeight="semibold" symbol={symbol} />

      <Typography color="onBackgroundMedium" variant="paragraph-md">
        {'and is'}
      </Typography>

      {/* EXECUTION STATUS */}
      {isFinal ? (
        <Badge
          backgroundColor="greenOpacity"
          borderColor="success"
          className="flex-grow-0"
          colorVariant="success"
          label="Successful"
        />
      ) : (
        <Badge
          backgroundColor="warningOpacity"
          borderColor="warning"
          className="flex-grow-0"
          colorVariant="warning"
          label="Unfinalized"
        />
      )}
    </div>
  );
};
