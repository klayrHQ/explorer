import { Typography } from "../../atoms";
import { Badge } from "../../atoms";
import { ImageName } from "../../atoms/account/avatarAddress";
import { Currency } from "../../atoms/base/currency";
import { trimFour } from "../../../utils/functions";

interface TransactionBannerProps {
  amount?: string | number;
  symbol?: string;
  senderName?: string | null;
  senderAddress: string;
  senderImageUrl?: string | null;
  receiverName?: string | null;
  receiverAddress?: string;
  receiverImageUrl?: string | null;
  moduleCommand?: string;
  executionStatus?: string;
  timestamp?: number;
  badgeColor?: string;
  transactions?: string | number;
}

export const BannerText = ({
  amount,
  symbol,
  senderName,
  senderAddress,
  senderImageUrl,
  executionStatus,
  transactions,
}: TransactionBannerProps) => {
  return (
    <div className="transitionBannerContainerWidthMobile desktop:w-transitionBannerContainerWidth  flex flex-wrap items-center gap-1.5 mt-6">
      <Typography variant="paragraph-md" color="onBackgroundMedium">
        generated by
      </Typography>

      {/* SENDER */}
      <ImageName
        imageUrl={
          senderImageUrl ||
          "https://i.pinimg.com/originals/33/43/f1/3343f1d93df9126c9123917f67893927.jpg"
        }
        name={senderName || trimFour(senderAddress)}
      />

      <Typography variant="paragraph-md" color="onBackgroundMedium">
        containing
      </Typography>

      {/* TRANSACTIONS */}
      <Typography fontWeight="semibold" variant="paragraph-md">
        {transactions}
      </Typography>

      <Typography variant="paragraph-md" color="onBackgroundMedium">
        transactions with a reward of
      </Typography>

      {/* AMOUNT */}
      <Currency amount={amount ?? 0} symbol={symbol} />

      <Typography variant="paragraph-md" color="onBackgroundMedium">
        and was
      </Typography>

      {/* EXECUTION STATUS */}
      {executionStatus === "successful" ? (
        <Badge
          backgroundColor="greenOpacity"
          borderColor="success"
          className="flex-grow-0"
          colorVariant="success"
          label="Successful"
        />
      ) : (
        <Badge
          backgroundColor="redOpacity"
          borderColor="error"
          className="flex-grow-0"
          colorVariant="error"
          label="Failed"
        />
      )}
    </div>
  );
};

